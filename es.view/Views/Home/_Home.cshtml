@model es.view.Models.IndexViewModel
@{
    ViewBag.Title = "Latest Posts";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewBag.Title</title>
    <style>
        /* Styling for post cards */
        .post-card {
            position: relative;
            margin-bottom: 20px;
        }

        .post-number {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #007bff;
            color: #fff;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container mt-5">
        <main aria-labelledby="title">
            <h2 id="title" class="text-center mb-4">@ViewBag.Title</h2>
            <!-- Posts will be appended here -->
            <div id="posts-container"></div>
            <!-- Loading and end-of-list indicators -->
            <div id="loading" class="text-center my-3" style="display: none;">Loading...</div>
            <div id="scroll-sentinel"></div>
            <div id="no-more-posts" class="text-center my-3" style="display: none;">No more posts available.</div>
        </main>
    </div>

    <script>
        // ===== Configuration and Global Variables =====
        const pageSize = 5;
        let page = 1;
        let isLoading = false;
        let hasMorePosts = true;
        let postCount = 0;
        const loadedPostIds = new Set();
        let youtubeIntervals = {};
        let watchSessions = {};

        // ===== DOM Element References =====
        const postsContainer = document.getElementById("posts-container");
        const loadingIndicator = document.getElementById("loading");
        const noMorePosts = document.getElementById("no-more-posts");
        const sentinel = document.getElementById("scroll-sentinel");

        // ===== Helper Functions =====

        // Create a post card element from a post object
        const createPostCard = (post, count) => {
            const card = document.createElement("div");
            card.classList.add("card", "post-card");

            // Determine video embed if ContentURL is provided
            let videoEmbed = "";
            if (post.ContentURL && post.ContentURL.trim()) {
                let embedUrl = post.ContentURL;
                if (embedUrl.includes("youtube.com") && !embedUrl.includes("enablejsapi=1")) {
                    embedUrl += (embedUrl.includes("?") ? "&" : "?") + "enablejsapi=1";
                }
                videoEmbed = `
                            <div style="
                                position: relative;
                                width: 100%;
                                padding-top: 56.25%;
                                border: 2px solid #ddd;
                                border-radius: 5px;
                                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                                overflow: hidden;
                                margin-bottom: 1rem;
                            ">
                                <iframe data-contentid="${post.ContentID}" src="${embedUrl}" allowfullscreen style="
                                    position: absolute;
                                    top: 0;
                                    left: 0;
                                    width: 100%;
                                    height: 100%;
                                    border: 0;
                                "></iframe>
                            </div>
                        `;
            }

            // Determine download link if a file is attached (using FileName)
            let downloadLink = "";
            if (post.FileName && post.FileName.trim()) {
                downloadLink = `<a href="/Home/DownloadFile?id=${post.ContentID}">${post.FileName}</a>`;
            }

            // Set inner HTML of the card
            card.innerHTML = `
                        <div class="card-body">
                            <span class="post-number">${count}</span>
                            <h5 class="card-title">${post.Title}</h5>
                            ${videoEmbed ? videoEmbed : `<div class="card-text">${post.ContentBody}</div>`}
                            ${downloadLink}
                        </div>
                    `;

            // Remove any unwanted attributes or elements from the card
            card.querySelectorAll('[contenteditable]').forEach(elem => elem.removeAttribute('contenteditable'));
            card.querySelectorAll('input').forEach(input => input.remove());

            return card;
        };

        // Load posts from the server and append them to the posts container
        const loadPosts = () => {
            if (isLoading || !hasMorePosts) return;
            isLoading = true;
            loadingIndicator.style.display = "block";

            fetch(`/Home/GetPosts?page=${page}&pageSize=${pageSize}`, { credentials: "include" })
                .then(response => response.json())
                .then(data => {
                    if (!data || data.length === 0) {
                        hasMorePosts = false;
                        noMorePosts.style.display = "block";
                        if (observer) observer.disconnect();
                        return;
                    }
                    data.forEach(post => {
                        if (!loadedPostIds.has(post.ContentID)) {
                            loadedPostIds.add(post.ContentID);
                            postCount++;
                            const postCard = createPostCard(post, postCount);
                            postsContainer.appendChild(postCard);
                        }
                    });
                    initializeVideoTracking();
                    page++;
                })
                .catch(error => console.error("Error fetching posts:", error))
                .finally(() => {
                    isLoading = false;
                    loadingIndicator.style.display = "none";
                });
        };

        // ===== Video Tracking Functions =====

        // Initialize video tracking by loading necessary APIs
        const initializeVideoTracking = () => {
            // Load YouTube API if needed
            if (document.querySelector("iframe[src*='youtube.com']") && !window.YT) {
                const ytScript = document.createElement("script");
                ytScript.src = "https://www.youtube.com/iframe_api";
                ytScript.onload = setupYouTubeTracking;
                document.body.appendChild(ytScript);
            } else if (window.YT && YT.Player) {
                setupYouTubeTracking();
            }

            // Load Vimeo API if needed
            if (document.querySelector("iframe[src*='vimeo.com']") && !window.Vimeo) {
                const vimeoScript = document.createElement("script");
                vimeoScript.src = "https://player.vimeo.com/api/player.js";
                vimeoScript.onload = setupVimeoTracking;
                document.body.appendChild(vimeoScript);
            } else {
                setupVimeoTracking();
            }
        };

        // Setup YouTube tracking for all YouTube iframes
        const setupYouTubeTracking = () => {
            document.querySelectorAll("iframe[src*='youtube.com']").forEach(iframe => {
                if (!iframe.dataset.youtubeInitialized) {
                    if (!iframe.id) {
                        iframe.id = "yt-player-" + Math.random().toString(36).substr(2, 9);
                    }
                    new YT.Player(iframe, {
                        events: {
                            onStateChange: event => {
                                const playerId = event.target.getIframe().id;
                                const contentId = iframe.dataset.contentid;
                                if (event.data === YT.PlayerState.PLAYING) {
                                    startWatching(contentId);
                                    if (!youtubeIntervals[playerId]) {
                                        youtubeIntervals[playerId] = setInterval(() => {
                                            const currentTime = event.target.getCurrentTime();
                                            updateWatching(contentId, Math.floor(currentTime));
                                        }, 5000);
                                    }
                                } else if (youtubeIntervals[playerId]) {
                                    clearInterval(youtubeIntervals[playerId]);
                                    delete youtubeIntervals[playerId];
                                }
                            }
                        }
                    });
                    iframe.dataset.youtubeInitialized = "true";
                }
            });
        };

        // Setup Vimeo tracking for all Vimeo iframes
        const setupVimeoTracking = () => {
            document.querySelectorAll("iframe[src*='vimeo.com']").forEach(iframe => {
                if (!iframe.dataset.vimeoInitialized) {
                    const player = new Vimeo.Player(iframe);
                    player.on('play', () => startWatching(iframe.dataset.contentid));
                    player.on('timeupdate', data => {
                        const contentId = iframe.dataset.contentid;
                        const lastUpdate = iframe.dataset.lastUpdate ? parseFloat(iframe.dataset.lastUpdate) : 0;
                        if (data.seconds - lastUpdate >= 5) {
                            iframe.dataset.lastUpdate = data.seconds;
                            updateWatching(contentId, Math.floor(data.seconds));
                        }
                    });
                    iframe.dataset.vimeoInitialized = "true";
                }
            });
        };

        // ===== Video Watch Session Functions =====

        const startWatching = contentId => {
            if (!watchSessions[contentId]) {
                const data = {
                    contentId,
                    startTime: new Date().toISOString(),
                    watchedSeconds: 0
                };
                fetch("/api/VideoWatch/Start", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    credentials: "include",
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(result => {
                        watchSessions[contentId] = result.videoWatchID;
                    })
                    .catch(error => console.error("Error starting watch session:", error));
            }
        };

        const updateWatching = (contentId, watchedSeconds) => {
            if (watchSessions[contentId]) {
                const data = { watchedSeconds };
                fetch(`/api/VideoWatch/Update/${watchSessions[contentId]}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    credentials: "include",
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(result => console.log("Updated watch session:", result))
                    .catch(error => console.error("Error updating watch session:", error));
            }
        };

        // ===== Infinite Scrolling with Intersection Observer =====
        let observer;
        document.addEventListener("DOMContentLoaded", () => {
            if ('IntersectionObserver' in window) {
                observer = new IntersectionObserver(entries => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) loadPosts();
                    });
                }, { rootMargin: "50px" });
                observer.observe(sentinel);
            } else {
                // Fallback scroll event
                window.addEventListener("scroll", () => {
                    if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 50) {
                        loadPosts();
                    }
                });
            }
            // Load the first set of posts
            loadPosts();
        });
    </script>
</body>
</html>
